"""
Sample Data Script for Crypto Chatbot (MongoDB Version)
This script creates sample users and conversation history for testing.
"""

import os
import asyncio
from datetime import datetime, timedelta
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# MongoDB Configuration
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb+srv://user1:Toilaan123*@mlops1.o9mdodh.mongodb.net/?retryWrites=true&w=majority&appName=mlops1")
DATABASE_NAME = "crypto_chatbot"

class SampleDataCreator:
    def __init__(self):
        self.client = None
        self.db = None
    
    async def connect(self):
        """Connect to MongoDB"""
        try:
            self.client = AsyncIOMotorClient(MONGODB_URL)
            self.db = self.client[DATABASE_NAME]
            
            # Test connection
            await self.client.admin.command('ping')
            print("‚úÖ Connected to MongoDB successfully!")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to connect to MongoDB: {e}")
            return False
    
    async def create_sample_users(self):
        """Create sample users"""
        users_collection = self.db.users
        
        sample_users = [
            {
                "username": "john_trader",
                "email": "john@cryptotrader.com",
                "full_name": "John Trader",
                "created_at": datetime.utcnow(),
                "is_active": True
            },
            {
                "username": "crypto_alice",
                "email": "alice@blockchain.io",
                "full_name": "Alice Crypto",
                "created_at": datetime.utcnow(),
                "is_active": True
            },
            {
                "username": "btc_bob",
                "email": "bob@bitcoin.org",
                "full_name": "Bob Bitcoin",
                "created_at": datetime.utcnow(),
                "is_active": True
            },
            {
                "username": "demo_user",
                "email": "demo@example.com",
                "full_name": "Demo User",
                "created_at": datetime.utcnow(),
                "is_active": True
            }
        ]
        
        created_users = []
        
        for user_data in sample_users:
            try:
                # Check if user already exists
                existing_user = await users_collection.find_one({"username": user_data["username"]})
                
                if existing_user:
                    print(f"‚ö†Ô∏è  User '{user_data['username']}' already exists (ID: {existing_user['_id']})")
                    created_users.append(existing_user)
                else:
                    # Insert new user
                    result = await users_collection.insert_one(user_data)
                    user_data["_id"] = result.inserted_id
                    created_users.append(user_data)
                    print(f"‚úÖ Created user: {user_data['username']} (ID: {result.inserted_id})")
                    
            except Exception as e:
                print(f"‚ùå Error creating user {user_data['username']}: {e}")
        
        return created_users
    
    async def create_sample_conversations(self, users):
        """Create sample conversation history"""
        conversations_collection = self.db.conversation_history
        
        # Sample conversations in Vietnamese
        sample_conversations = [
            {
                "user": "john_trader",
                "question": "Bitcoin gi√° bao nhi√™u h√¥m nay?",
                "answer": "Theo d·ªØ li·ªáu m·ªõi nh·∫•t, gi√° Bitcoin hi·ªán t·∫°i l√† kho·∫£ng $65,400 USD. Gi√° ƒë√£ tƒÉng 2.3% trong 24 gi·ªù qua. ƒê√¢y l√† m·ªôt t√≠n hi·ªáu t√≠ch c·ª±c cho th·ªã tr∆∞·ªùng crypto.",
                "type": "price_query"
            },
            {
                "user": "crypto_alice",
                "question": "T√¥i n√™n ƒë·∫ßu t∆∞ v√†o coin n√†o ƒë·ªÉ l·ª£i nhu·∫≠n cao?",
                "answer": "D·ª±a tr√™n ph√¢n t√≠ch th·ªã tr∆∞·ªùng, m·ªôt s·ªë ƒë·ªìng ti·ªÅn ti·ªÅm nƒÉng bao g·ªìm: Ethereum (ETH) v·ªõi c√¥ng ngh·ªá smart contracts m·∫°nh m·∫Ω, Solana (SOL) v·ªõi t·ªëc ƒë·ªô giao d·ªãch nhanh, v√† Polygon (MATIC) v·ªõi chi ph√≠ th·∫•p. Tuy nhi√™n, b·∫°n n√™n nghi√™n c·ª©u k·ªπ v√† ch·ªâ ƒë·∫ßu t∆∞ s·ªë ti·ªÅn c√≥ th·ªÉ ch·∫•p nh·∫≠n m·∫•t.",
                "type": "investment_advice"
            },
            {
                "user": "btc_bob",
                "question": "T√¥i c√≥ th·ªÉ mua Bitcoin ·ªü ƒë√¢u an to√†n?",
                "answer": "B·∫°n c√≥ th·ªÉ mua Bitcoin t·ª´ c√°c s√†n giao d·ªãch uy t√≠n nh∆∞: Binance, Coinbase, Kraken, ho·∫∑c FTX. ƒê·ªëi v·ªõi ng∆∞·ªùi Vi·ªát Nam, c√≥ th·ªÉ s·ª≠ d·ª•ng Binance P2P ƒë·ªÉ mua b·∫±ng VND. Nh·ªõ b·∫≠t x√°c th·ª±c 2 l·ªõp (2FA) v√† kh√¥ng chia s·∫ª th√¥ng tin t√†i kho·∫£n cho ai.",
                "type": "exchange_recommendation"
            },
            {
                "user": "demo_user",
                "question": "Ethereum s·∫Ω l√™n hay xu·ªëng trong tu·∫ßn t·ªõi?",
                "answer": "D·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t, Ethereum ƒëang trong xu h∆∞·ªõng tƒÉng trung h·∫°n. Tuy nhi√™n, th·ªã tr∆∞·ªùng crypto r·∫•t bi·∫øn ƒë·ªông v√† kh√≥ d·ª± ƒëo√°n ch√≠nh x√°c. T√¥i khuy√™n b·∫°n n√™n theo d√µi c√°c ch·ªâ b√°o k·ªπ thu·∫≠t nh∆∞ RSI, MACD v√† volume ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ ph√π h·ª£p.",
                "type": "prediction"
            },
            {
                "user": "john_trader",
                "question": "DCA l√† g√¨? C√≥ n√™n √°p d·ª•ng cho crypto kh√¥ng?",
                "answer": "DCA (Dollar Cost Averaging) l√† chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ ƒë·ªãnh k·ª≥ v·ªõi s·ªë ti·ªÅn c·ªë ƒë·ªãnh b·∫•t k·ªÉ gi√° th·ªã tr∆∞·ªùng. V·ªõi crypto, DCA r·∫•t hi·ªáu qu·∫£ v√¨ gi√∫p gi·∫£m r·ªßi ro bi·∫øn ƒë·ªông gi√°. V√≠ d·ª•: thay v√¨ ƒë·∫ßu t∆∞ 12 tri·ªáu m·ªôt l·∫ßn, b·∫°n c√≥ th·ªÉ ƒë·∫ßu t∆∞ 1 tri·ªáu m·ªói th√°ng trong 12 th√°ng.",
                "type": "strategy_advice"
            },
            {
                "user": "crypto_alice",
                "question": "L√†m sao ƒë·ªÉ b·∫£o m·∫≠t v√≠ crypto?",
                "answer": "ƒê·ªÉ b·∫£o m·∫≠t v√≠ crypto: 1) S·ª≠ d·ª•ng hardware wallet cho s·ªë ti·ªÅn l·ªõn, 2) B·∫≠t 2FA tr√™n t·∫•t c·∫£ t√†i kho·∫£n, 3) Kh√¥ng bao gi·ªù chia s·∫ª private key, 4) S·ª≠ d·ª•ng v√≠ cold storage, 5) Backup seed phrase ·ªü n∆°i an to√†n, 6) C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm th∆∞·ªùng xuy√™n. Nh·ªõ r·∫±ng 'Not your keys, not your coins'!",
                "type": "security_advice"
            },
            {
                "user": "btc_bob",
                "question": "Th·ªã tr∆∞·ªùng bull run hay bear market hi·ªán t·∫°i?",
                "answer": "Hi·ªán t·∫°i th·ªã tr∆∞·ªùng ƒëang trong giai ƒëo·∫°n ph·ª•c h·ªìi sau chu k·ª≥ bear market. C√°c ch·ªâ s·ªë nh∆∞ Bitcoin Fear & Greed Index, t·ªïng v·ªën h√≥a th·ªã tr∆∞·ªùng, v√† ho·∫°t ƒë·ªông c·ªßa c√°c nh√† ƒë·∫ßu t∆∞ t·ªï ch·ª©c ƒë·ªÅu cho th·∫•y t√≠n hi·ªáu t√≠ch c·ª±c. Tuy nhi√™n, c·∫ßn th·∫≠n tr·ªçng v√¨ th·ªã tr∆∞·ªùng v·∫´n c√≤n nhi·ªÅu bi·∫øn ƒë·ªông.",
                "type": "market_analysis"
            }
        ]
        
        # Create user lookup dictionary
        user_lookup = {user["username"]: user for user in users}
        
        created_conversations = []
        base_time = datetime.utcnow() - timedelta(days=7)
        
        for i, conv_data in enumerate(sample_conversations):
            try:
                username = conv_data["user"]
                user = user_lookup.get(username)
                
                if not user:
                    print(f"‚ö†Ô∏è  User '{username}' not found, skipping conversation")
                    continue
                
                conversation = {
                    "user_id": str(user["_id"]),
                    "username": username,
                    "user_question": conv_data["question"],
                    "bot_answer": conv_data["answer"],
                    "timestamp": base_time + timedelta(hours=i*4),  # Spread conversations over time
                    "session_id": f"session_{username}_{i+1}",
                    "conversation_type": conv_data["type"]
                }
                
                result = await conversations_collection.insert_one(conversation)
                conversation["_id"] = result.inserted_id
                created_conversations.append(conversation)
                print(f"‚úÖ Created conversation for {username}: {conv_data['question'][:50]}...")
                
            except Exception as e:
                print(f"‚ùå Error creating conversation: {e}")
        
        return created_conversations
    
    async def verify_data(self):
        """Verify the created data"""
        try:
            # Count users
            users_count = await self.db.users.count_documents({})
            
            # Count conversations
            conversations_count = await self.db.conversation_history.count_documents({})
            
            print(f"\nüìä Database Summary:")
            print(f"   üë• Total Users: {users_count}")
            print(f"   üí¨ Total Conversations: {conversations_count}")
            
            # Show recent conversations
            print(f"\nüí¨ Recent Conversations:")
            recent_conversations = await self.db.conversation_history.find({}).sort("timestamp", -1).limit(3).to_list(3)
            
            for conv in recent_conversations:
                print(f"   - {conv['username']}: {conv['user_question'][:60]}...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error verifying data: {e}")
            return False
    
    async def close(self):
        """Close database connection"""
        if self.client:
            self.client.close()
            print("üîí Database connection closed")

async def main():
    """Main function to create sample data"""
    print("üöÄ Creating Sample Data for Crypto Chatbot (MongoDB)")
    print("=" * 60)
    
    creator = SampleDataCreator()
    
    try:
        # Step 1: Connect to MongoDB
        if not await creator.connect():
            return
        
        # Step 2: Create sample users
        print("\nüë• Creating sample users...")
        users = await creator.create_sample_users()
        
        if not users:
            print("‚ùå No users created. Cannot proceed with conversations.")
            return
        
        # Step 3: Create sample conversations
        print("\nüí¨ Creating sample conversations...")
        conversations = await creator.create_sample_conversations(users)
        
        # Step 4: Verify data
        await creator.verify_data()
        
        print(f"\n‚úÖ Sample data creation completed!")
        print(f"üåê MongoDB database: {DATABASE_NAME}")
        print("üéØ You can now start the application: python main.py")
        
    except Exception as e:
        print(f"‚ùå Error creating sample data: {e}")
    
    finally:
        await creator.close()

if __name__ == "__main__":
    asyncio.run(main()) 